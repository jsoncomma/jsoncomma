<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>jsoncomma</title>
    <!-- {{/* just make debugging the css a bit easier, whilst having a very efficient web page */}} -->
    {{ if .Style }}
    <style>
    {{ .Style }}
    </style>
    {{ else }}
    <link rel="stylesheet" type="text/css" href="./main.css">
    {{ end }}
</head>
<body>
    {{ .BotGenerated }}
    <h1>jsoncomma
        <code>{{ .Version }}</code>
    </h1>
    <p>jsoncomma is a simple utility which manages the commas in your JSON-like files. It adds needed ones, and removes the others.</p>
    <p>jsoncomma runs as a standalone program (written in Go), so it's completely independent of your editor. It's extremely simple to integrate, and there are some already existing solution that you can "plug and play".</p>
    <p>It's bloody fast. Almost as fast as simple copying. And there is still some room for improvements.</p>

    <h2>Official Plugins</h2>

    <p>FIXME: implement a reference plugin for Sublime Text</p>

    <p><em>There currently isn't any official plugin.</em></p>

    <h2>Plugin Developer Reference</h2>

    <h3>Guidlines</h3>

    <p>If you are implementing a plugin for an editor, then here are a few guidlines. They all emerge from one question: <em>why</em> did the user install this utility? My answer is because he just wants something which fixes up his JSON for him, in the background. Hence</p>
    <ul>
        <li><strong>Your plugin should fix JSON files <u>on save</u> by default</strong>. That's what most user's will want.</li>
        <li><strong>Try to automatically detect JSON files, and if you can't do it perfectly, be configurable.</strong>
            
            <ul>
                <li>Detect JSON (<code>.json</code>, known file extension, etc)</li>
                <li>Support custom file extensions</li>
                <li>Enable for this view kind of command (note that this command should only be visible is JSON Comma isn't already enabled)</li>
            </ul>

            <p>Make sure you don't have any false positives (ie. trying to fix something that isn't JSON)</p>
        </li>
<!--         <li>People use JSON for all kinds of thing (for eg. <code>.sublime-settings</code> are JSON), so your plugin should try to do be as smart as possible by default (in the case of a sublime text, a plugin should support <em>by default</em> <code>.sublime-settings</code> files. However, until someone finds a way to detect whether the file is actually JSON <em>just from it's content</em> and <strong>without any false positive</strong> (you <strong>really</strong> don't want to fix something that isn't JSON), your plugin should be configurable:
        </li>
 -->   
    </ul>

    <h3>Using the server</h3>

    <p>Your plugin <strong>should NOT USE THE CLI</strong>. You will pay the process start up cost every time a user saves his file. Instead, use the optimized web server.</p>

    <pre><code>$ jsoncomma server -help
{{ .JsonCommaServerHelp }}</code></pre>

    <p>The server only handles one URL: <code>/</code>. You should only send POST requests on it, with the body content to be just the JSON you want to fix (ie. the file's content). The encoding should always be <code>UTF-8</code>. If any kind of error occurs on the server, only JSON responses will be issued, explaining the reason of the error. Otherwise, a plain text response is given: the uploaded code with fixed up commas.</p>

    <p>Here is the entire list of responses <code>jsoncomma server</code> can give.</p>

    <p>FIXME: fuzz that web server, and make sure they match the expected pages</p>

    <!-- this section should be dynamically generated from the tests -->

    <ul>
        <li>
            Endpoint: <code>/</code><br />
            Method: <code>POST</code><br />
            Status Code: <code>200</code><br />
            Content-Type: <code>text/plain; charset=utf-8</code><br />
            Body:
            <pre><code>&lt;The uploaded code, with commas fixed up&gt;</code></pre>
            <p>The reason the content type isn't <code>application/json; charset=utf-8</code> is because the response might contain comments for example, making it invalid JSON.</p>
        </li>

        <li>
            Endpoint: <code>/</code><br />
            Method: <strong>not</strong> <code>POST</code><br />
            Status Code: <code>405</code><br />
            Content-Type: <code>application/json; charset=utf-8</code><br />
            Body:
            <pre><code>{
    "kind": "method not allowed",
    "current method": &lt;method used&gt;,
    "msg": &lt;details&gt;
}</code></pre>
        </li>

        <li>
            Endpoint: <strong>not</strong> <code>/</code><br />
            Status Code: <code>404</code><br />
            Content-Type: <code>application/json; charset=utf-8</code><br />
            Body:
            <pre><code>{
    "kind": "not found",
    "current path": &lt;path used&gt;
    "msg": &lt;details&gt;
}</code></pre>
        </li>
    </ul>

    <p>That's it. Any other kind of response is an error and <a href="#report">should be reported</a></p>

    <h2>Extra</h2>

    <p>If you are wondering why the default port is 2442: it comes from <code>sum(map(lambda c: ord(c), "json")) == 442</code>. It's too small (it's recommended to use port > 1024, because below, they might be standard things like 80 for web, etc). So, I picked 2442 because it reads backwards.
</p>

</body>
</html>